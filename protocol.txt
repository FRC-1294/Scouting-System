//
//Scout
//

//Connect
Scout connects
Scout authenticates with super secret password (pop1294)
Server sends "id" to scout with scout ID


//Match
Server queries Database for match data
Server brodcasts "match" to all scouts with match and robot data
Server decides which scouts to use
Server sends "scout" to the decided scouts with which robot and color to scout
Server sets status to "Scouting"


//End of match
Server sends "endMatch"
Scouts are asked to submit data


//Data return
Scout sends "data" to server with robot data
Server acknowledges that it made it to database


//Data access
Scout sends "strat" to server with desired robots or match #
Server acknowledges, returning the desired data


//Status
Client sends "status" to server
Server acknowledges with status

Server can send "status" to scouts with status

Server has a setStatus() method that changes a variable and sends "status"

server.on("status" (ack) => {
ack(statusVariable)
}) 





//
//Admin
//

//Connect
Admin connects
Admin authenticates


//Initial data
//TODO: Deal with
Admin sends "getData"
Server queries TBA api
Server gets data for every match
Load data into database


//Match
Admin sends "setupMatch" with match #
Server runs "//Match" above


//
//Database
//

//Match
//TODO: Figure out structure


//Team/Match
teamNumber: int
matchNumber: int
auto: int (0- none, 1- move, 2- score)
boxesMoved: int
obstaclesAvoided: bool (true: Avoided well, false: hit many)


//Team (aggregation)
teamNumber:
matchesScouted: int

averageAuto: double
maxAuto: int
minAuto: int

averageBoxesMoved: double
maxBoxesMoved: int
minBoxesMoved: int